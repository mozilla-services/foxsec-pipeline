package com.mozilla.secops.parser;

import java.io.Serializable;
import java.util.EnumMap;
import org.apache.beam.sdk.metrics.Counter;
import org.apache.beam.sdk.metrics.Metrics;

/** Beam metrics generated by various parser functions */
public class ParserMetrics implements Serializable {
  private static final long serialVersionUID = 1L;

  /** Prefix for metrics namespace component */
  public static final String NAMESPACE_PREFIX = "parser_";

  /** Custom metric name for event too old errors */
  public static final String METRIC_EVENT_TOO_OLD = "event_too_old";

  public static final String METRIC_UNKNOWN_PAYLOAD_TYPE = "unknown_payload_type";

  public static final String METRIC_PARSER_UNHANDLED_EXCEPTION = "unhandled_exception";

  private final Counter metricEventTooOld;
  private final Counter metricEventUnhandledException;
  private final String namespace;

  private final EnumMap<Payload.PayloadType, Counter> metricMapPayloadType;
  private final Counter metricUnknownPayloadType;

  /** Event was too old */
  public void eventTooOld() {
    metricEventTooOld.inc();
  }

  /** Event was caused an unhandled exception in parser */
  public void eventUnhandledException() {
    metricEventUnhandledException.inc();
  }

  /**
   * Event of a PayloadType was parsed
   *
   * @param type {@link Payload.PayloadType}
   */
  public void eventOfPayload(Payload.PayloadType type) {
    metricMapPayloadType.getOrDefault(type, metricUnknownPayloadType).inc();
  }

  /**
   * Create new ParserMetrics
   *
   * @param namespacePostfix String to be appended to NAMESPACE_PREFIX for namespace, null for
   *     default
   */
  public ParserMetrics(String namespacePostfix) {
    if (namespacePostfix == null) {
      namespace = NAMESPACE_PREFIX + "default";
    } else {
      namespace = NAMESPACE_PREFIX + namespacePostfix;
    }
    metricEventTooOld = Metrics.counter(namespace, METRIC_EVENT_TOO_OLD);
    metricEventUnhandledException = Metrics.counter(namespace, METRIC_PARSER_UNHANDLED_EXCEPTION);

    metricMapPayloadType = new EnumMap<>(Payload.PayloadType.class);

    for (Payload.PayloadType type : Payload.PayloadType.values()) {
      metricMapPayloadType.put(type, Metrics.counter(namespace, type.toString()));
    }

    metricUnknownPayloadType = Metrics.counter(namespace, METRIC_UNKNOWN_PAYLOAD_TYPE);
  }
}
